import java.util.Stack;
import java.util.Scanner;

public class ExpressionConverter {

    public static boolean isOperator(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/' || c == '^' || c == '%' ||
               c == '&' || c == '|' || c == '!' || c == '='; 
    }

    public static int precedence(char c) {
        if (c == '+' || c == '-') {
            return 1;
        } else if (c == '*' || c == '/' || c == '%') {
            return 2;
        } else if (c == '^') {
            return 3;
        } else if (c == '&' || c == '|') {
            return 4; 
        } else if (c == '=' || c == '!') {
            return 5; 
        }
        return -1;
    }

    public static String infixToPostfix(String infix) {
        Stack<Character> stack = new Stack<>();
        StringBuilder postfix = new StringBuilder();

        for (int i = 0; i < infix.length(); i++) {
            char c = infix.charAt(i);

            if (Character.isLetterOrDigit(c)) {
                postfix.append(c);
            } else if (c == '(') {
                stack.push(c);
            } else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                stack.pop();
            } else if (isOperator(c)) {
                while (!stack.isEmpty() && precedence(c) <= precedence(stack.peek())) {
                    postfix.append(stack.pop());
                }
                stack.push(c);
            }
        }

        while (!stack.isEmpty()) {
            postfix.append(stack.pop());
        }

        return postfix.toString();
    }

    public static String infixToPrefix(String infix) {
        StringBuilder reversedInfix = new StringBuilder(infix).reverse();
        StringBuilder reversedInfixModified = new StringBuilder();

        for (char c : reversedInfix.toString().toCharArray()) {
            if (c == '(') {
                reversedInfixModified.append(')');
            } else if (c == ')') {
                reversedInfixModified.append('(');
            } else {
                reversedInfixModified.append(c);
            }
        }

        String postfix = infixToPostfix(reversedInfixModified.toString());

        return new StringBuilder(postfix).reverse().toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.print("Enter infix expression (or type 'exit' to quit): ");
            String infix = scanner.nextLine().trim();

            if (infix.equalsIgnoreCase("exit")) {
                System.out.println("Exiting...");
                break;
            }

            if (infix.isEmpty()) {
                System.out.println("Infix expression cannot be empty.");
                continue;
            }

            String prefix = infixToPrefix(infix);
            String postfix = infixToPostfix(infix);

            System.out.println("Prefix Expression: " + prefix);
            System.out.println("Postfix Expression: " + postfix);
        }

        scanner.close();
    }
}
